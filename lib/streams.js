// Generated by CoffeeScript 1.3.3
(function() {
  var ForwardingStream, LineBuffer, PrependingBuffer, Stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Stream = require('stream').Stream;

  ForwardingStream = (function(_super) {

    __extends(ForwardingStream, _super);

    function ForwardingStream() {
      this.writable = true;
      this.readable = true;
    }

    ForwardingStream.prototype.write = function(chunk) {
      return this.emit('data', chunk);
    };

    ForwardingStream.prototype.ended = function() {
      return this.emit('end');
    };

    ForwardingStream.prototype.end = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args.length > 0) {
        this.write.apply(this, args);
      }
      return this.ended();
    };

    return ForwardingStream;

  })(Stream);

  LineBuffer = (function(_super) {

    __extends(LineBuffer, _super);

    function LineBuffer() {
      LineBuffer.__super__.constructor.apply(this, arguments);
      this._buffer = "";
    }

    LineBuffer.prototype.write = function(chunk) {
      var index, line, _results;
      this._buffer += chunk;
      _results = [];
      while ((index = this._buffer.indexOf("\n")) !== -1) {
        line = this._buffer.slice(0, index) + '\n';
        this._buffer = this._buffer.slice(index + 1, this._buffer.length);
        _results.push(this.emit('data', line));
      }
      return _results;
    };

    LineBuffer.prototype.ended = function() {
      if (this._buffer.length > 0) {
        this.emit('data', this._buffer);
      }
      return LineBuffer.__super__.ended.apply(this, arguments);
    };

    return LineBuffer;

  })(ForwardingStream);

  PrependingBuffer = (function(_super) {

    __extends(PrependingBuffer, _super);

    function PrependingBuffer(preamble) {
      PrependingBuffer.__super__.constructor.apply(this, arguments);
      this.preamble = typeof preamble === 'function' ? preamble : function() {
        return preamble.toString();
      };
    }

    PrependingBuffer.prototype.write = function(chunk) {
      return this.emit('data', this.preamble() + chunk);
    };

    return PrependingBuffer;

  })(ForwardingStream);

  exports.LineBuffer = LineBuffer;

  exports.PrependingBuffer = PrependingBuffer;

  exports.ForwardingStream = ForwardingStream;

}).call(this);
